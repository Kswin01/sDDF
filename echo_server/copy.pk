// Beginning of process rx complete function

var mux_was_full_c = @base;
var mux_was_full_a = @base + 2;

strb mux_was_full_c, 1;
strb mux_was_full_c, 0;

#ring_full(mux_was_full_c, 2, mux_was_full_a, 1);

var mux_was_full = ldb mux_was_full_a;

var mux_avail_original_size_c = @base + 3;
var mux_avail_original_size_a = @base + 5;

strb mux_avail_original_size_c, 1;

#ring_size(mux_avail_original_size_c, 1, mux_avail_original_size_a, 8);

var cli_used_was_empty_c = @base + 13;
var cli_used_was_empty_a = @base + 15;

strb cli_used_was_empty_c, 0;
strb cli_used_was_empty_c, 0;

#ring_empty(cli_used_was_empty_c, 2, cli_used_was_empty_a, 1);

var cli_used_was_empty = ldb cli_used_was_empty_a;

var enqueued = 0;

var main_loop_invariant_a = @base + 16;
#main_loop_invariant(0,0, main_loop_invariant_a, 0);

var invariant = ldb main_loop_invariant_a;

while invariant == 0 {
    #batch_dequeue_memcpy_enqueue(0,0,0,0);
    enqueued = enqueued + 1;

    #main_loop_invariant(0,0, main_loop_invariant_a, 0);

    invariant = ldb main_loop_invariant_a;
}

if (cli_used_was_empty == 1) {
    if (enqueued == 1) {
        #notify_client(0,0,0,0);
    }
}

var notify_delayed_c = @base + 17;

strb notify_delayed_c, ldb mux_avail_original_size_a;
strb notify_delayed_c + 1, ldb mux_avail_original_size_a + 1;
strb notify_delayed_c + 2, ldb mux_avail_original_size_a + 2;
strb notify_delayed_c + 3, ldb mux_avail_original_size_a + 3;
strb notify_delayed_c + 4, ldb mux_avail_original_size_a + 4;
strb notify_delayed_c + 5, ldb mux_avail_original_size_a + 5;
strb notify_delayed_c + 6, ldb mux_avail_original_size_a + 6;
strb notify_delayed_c + 7, ldb mux_avail_original_size_a + 7;

strb notify_delayed_c + 8, (enqueued >> 24) & 255;
strb notify_delayed_c + 9, (enqueued >> 16) & 255;
strb notify_delayed_c + 10, (enqueued >> 8) & 255;
strb notify_delayed_c + 11, (enqueued & 255);

strb notify_delayed_c + 12, mux_was_full;

#notify_delayed(notify_delayed_c, 13, 0,0);

return 0;